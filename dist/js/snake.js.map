{"version":3,"sources":["snake/src/js/snake.js"],"names":["Snake","size","map","startField","_classCallCheck","this","_size","_map","_mapFields","getFields","_originalHeadField","_headField","_directions","UP","RIGHT","_createClass","key","value","_interval","window","clearInterval","destroySnake","_direction","calcInitialSnakeFields","setInterval","step","bind","document","elementCoordinates","element","getBoundingClientRect","startMove","DOWN","coordinates","changeDirection","LEFT","_snakeFields","event","_directionChanged","toUpperCase","field","length","calcNextHeadField","checkIfCollision","checkIfApple","calcSnakeFields","translateField","lastField","snakeField","_this","initEvent","dispatchEvent","customEvent","addSnakeField","createEvent","nextField","calcNextTailField","_lastField","pop","found","unshift","renderSnake","fields","isAppleField","querySelectorAll","i","remove","classList","snakeDomField","concat","add","toLowerCase","querySelector"],"mappings":"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","file":"snake.js","sourcesContent":["class Snake {\r\n    constructor(size, map, startField) {\r\n        this._size = size;\r\n        this._map = map;\r\n        this._mapFields = map.getFields();\r\n        this._originalHeadField = startField;\r\n        this._headField = startField;\r\n        this._directions = {\r\n            UP: \"UP\",\r\n            DOWN: \"DOWN\",\r\n            LEFT: \"LEFT\",\r\n            RIGHT: \"RIGHT\"\r\n        };\r\n        this._direction = this._directions.RIGHT;\r\n        this.calcInitialSnakeFields();\r\n    }\r\n\r\n    reset() {\r\n        if (this._interval) {\r\n            window.clearInterval(this._interval);\r\n        }\r\n        this.destroySnake();\r\n        this._direction = this._directions.RIGHT;\r\n        this._headField = this._originalHeadField;\r\n        this.calcInitialSnakeFields();\r\n    }\r\n\r\n    startMove() {\r\n        this._interval = window.setInterval(this.step.bind(this), 120);\r\n    }\r\n\r\n    handleClick(coordinates) {\r\n        const element = document.querySelector(\".snake--first\");\r\n\r\n        if (!element) { return; }\r\n        const elementCoordinates = element.getBoundingClientRect();\r\n        switch(this._direction) {\r\n            case this._directions.UP:\r\n            case this._directions.DOWN:\r\n                if (elementCoordinates.x > coordinates[0]) {\r\n                    this.changeDirection({ key: \"A\" });\r\n                } else {\r\n                    this.changeDirection({ key: \"D\" });\r\n                }\r\n                return;\r\n\r\n            case this._directions.RIGHT:\r\n            case this._directions.LEFT:\r\n                if (elementCoordinates.y > coordinates[1]) {\r\n                    this.changeDirection({ key: \"W\" });\r\n                } else {\r\n                    this.changeDirection({ key: \"S\" });\r\n                }\r\n                return;\r\n        }\r\n    }\r\n\r\n    getFields() {\r\n        return this._snakeFields;\r\n    }\r\n\r\n    changeDirection(event) {\r\n        if (this._directionChanged) {\r\n            return;\r\n        }\r\n\r\n        const key = event.key;\r\n        switch (key.toUpperCase()) {\r\n            case \"W\":\r\n                if (this._direction !== this._directions.DOWN && this._direction !== this._directions.UP) {\r\n                    this._direction = this._directions.UP;\r\n                    this._directionChanged = true;\r\n                }\r\n                break;\r\n            case \"S\":\r\n                if (this._direction !== this._directions.UP && this._direction !== this._directions.DOWN) {\r\n                    this._direction = this._directions.DOWN;\r\n                    this._directionChanged = true;\r\n                }\r\n                break;\r\n            case \"A\":\r\n                if (this._direction !== this._directions.RIGHT && this._direction !== this._directions.LEFT) {\r\n                    this._direction = this._directions.LEFT;\r\n                    this._directionChanged = true;\r\n                }\r\n                break;\r\n            case \"D\":\r\n                if (this._direction !== this._directions.LEFT && this._direction !== this._directions.RIGHT) {\r\n                    this._direction = this._directions.RIGHT;\r\n                    this._directionChanged = true;\r\n                }\r\n                break;\r\n        }\r\n    }\r\n\r\n    translateField(field) {\r\n        if (field[0] > this._mapFields.length - 1) {\r\n            field[0] = 0;\r\n        }\r\n        if (field[1] > this._mapFields.length - 1) {\r\n            field[1] = 0;\r\n        }\r\n        if (field[0] < 0) {\r\n            field[0] = this._mapFields.length - 1;\r\n        }\r\n        if (field[1] < 0) {\r\n            field[1] = this._mapFields.length - 1;\r\n        }\r\n        return field;\r\n    }\r\n\r\n    step() {\r\n        this.calcNextHeadField();\r\n        this.checkIfCollision();\r\n        this.checkIfApple();\r\n        this.calcSnakeFields();\r\n    }\r\n\r\n    calcNextHeadField() {\r\n        switch (this._direction) {\r\n            case this._directions.RIGHT:\r\n                this._headField = this.translateField([this._headField[0], this._headField[1] + 1]);\r\n                break;\r\n            case this._directions.LEFT:\r\n                this._headField = this.translateField([this._headField[0], this._headField[1] - 1]);\r\n                break;\r\n            case this._directions.UP:\r\n                this._headField = this.translateField([this._headField[0] - 1, this._headField[1]]);\r\n                break;\r\n            case this._directions.DOWN:\r\n                this._headField = this.translateField([this._headField[0] + 1, this._headField[1]]);\r\n                break;\r\n        }\r\n    }\r\n    calcNextTailField() {\r\n        const lastField = this._snakeFields[this._snakeFields.length-1];\r\n        switch (this._direction) {\r\n            case this._directions.RIGHT:\r\n                return this.translateField([lastField[0], lastField[1] - 1]);\r\n            case this._directions.LEFT:\r\n                return this.translateField([lastField[0], lastField[1] + 1]);\r\n            case this._directions.UP:\r\n                return this.translateField([lastField[0] + 1, lastField[1]]);\r\n            case this._directions.DOWN:\r\n                return this.translateField([lastField[0] - 1, lastField[1]]);\r\n        }\r\n    }\r\n    checkIfCollision() {\r\n        const found = this._snakeFields.find( (snakeField) => {\r\n            return snakeField[0] === this._headField[0] &&\r\n                snakeField[1] === this._headField[1];\r\n        });\r\n\r\n        if (found) {\r\n            const customEvent = document.createEvent('HTMLEvents');\r\n            customEvent.initEvent('snake:dead', true, true);\r\n            document.dispatchEvent(customEvent);\r\n        }\r\n    }\r\n\r\n    stop() {\r\n        window.clearInterval(this._interval);\r\n    }\r\n\r\n    checkIfApple() {\r\n        if (this._map.isAppleField(this._headField)) {\r\n            this.addSnakeField();\r\n            const customEvent = document.createEvent('HTMLEvents');\r\n            customEvent.initEvent('snake:apple', true, true);\r\n            document.dispatchEvent(customEvent);\r\n        }\r\n    }\r\n\r\n    addSnakeField() {\r\n        const nextField = this.calcNextTailField();\r\n        this._snakeFields.push(nextField);\r\n    }\r\n\r\n    calcSnakeFields() {\r\n        this._lastField = this._snakeFields.pop();\r\n        this._snakeFields.unshift(this._headField);\r\n        this.renderSnake();\r\n    }\r\n\r\n    calcInitialSnakeFields() {\r\n        this._snakeFields = [\r\n            this._headField,\r\n            this.translateField([this._headField[0], this._headField[1] - 1]),\r\n            this.translateField([this._headField[0], this._headField[1] - 2])\r\n        ];\r\n        this.renderSnake();\r\n    }\r\n\r\n    destroySnake() {\r\n        const fields = document.querySelectorAll(\".snake\");\r\n\r\n        for (let i = 0; i < fields.length; i++) {\r\n            fields[i].classList.remove(\"snake\");\r\n            fields[i].classList.remove(\"snake--first\");\r\n            fields[i].classList.remove(\"snake--last\");\r\n            fields[i].classList.remove(\"snake--up\");\r\n            fields[i].classList.remove(\"snake--down\");\r\n            fields[i].classList.remove(\"snake--left\");\r\n            fields[i].classList.remove(\"snake--right\");\r\n        }\r\n    }\r\n\r\n    renderSnake() {\r\n        let snakeDomField, lastField;\r\n        if (this._lastField) {\r\n            lastField = document.querySelector(\r\n                `.field-${this._lastField[0]}-${this._lastField[1]}`\r\n            );\r\n            lastField.classList.remove(\"snake\");\r\n            lastField.classList.remove(\"snake--first\");\r\n            lastField.classList.remove(\"snake--last\");\r\n            lastField.classList.remove(\"snake--up\");\r\n            lastField.classList.remove(\"snake--down\");\r\n            lastField.classList.remove(\"snake--left\");\r\n            lastField.classList.remove(\"snake--right\");\r\n        }\r\n\r\n        for (let i = 0; i < this._snakeFields.length; i++) {\r\n            snakeDomField = document.querySelector(\r\n                `.field-${this._snakeFields[i][0]}-${this._snakeFields[i][1]}`\r\n            );\r\n            snakeDomField.classList.add(\"snake\");\r\n\r\n            snakeDomField.classList.remove(\"snake--first\");\r\n            snakeDomField.classList.remove(\"snake--last\");\r\n            snakeDomField.classList.remove(\"snake--up\");\r\n            snakeDomField.classList.remove(\"snake--down\");\r\n            snakeDomField.classList.remove(\"snake--left\");\r\n            snakeDomField.classList.remove(\"snake--right\");\r\n\r\n            if (i === 0) {\r\n                snakeDomField.classList.add(`snake--first`);\r\n                snakeDomField.classList.add(`snake--${this._direction.toLowerCase()}`);\r\n            }\r\n            if (i === this._snakeFields.length -1) {\r\n                snakeDomField.classList.add(`snake--last`);\r\n                snakeDomField.classList.add(`snake--${this._direction.toLowerCase()}`);\r\n            }\r\n        }\r\n\r\n        this._directionChanged = false;\r\n    }\r\n}"]}