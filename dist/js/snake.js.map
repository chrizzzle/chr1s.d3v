{"version":3,"sources":["snake/src/js/snake.js"],"names":["Snake","size","map","startField","_classCallCheck","this","_size","_map","_mapFields","getFields","_originalHeadField","_headField","_directions","UP","DOWN","LEFT","RIGHT","_direction","_interval","window","clearInterval","destroySnake","calcInitialSnakeFields","setInterval","step","bind","element","document","querySelector","elementCoordinates","x","coordinates","changeDirection","key","y","event","_directionChanged","toUpperCase","_snakeFields","field","length","calcNextHeadField","checkIfCollision","checkIfApple","calcSnakeFields","translateField","lastField","_this","find","snakeField","customEvent","createEvent","initEvent","dispatchEvent","addSnakeField","nextField","push","_lastField","unshift","renderSnake","fields","querySelectorAll","i","classList","remove","snakeDomField","concat","add","toLowerCase"],"mappings":"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","file":"snake.js","sourcesContent":["class Snake {\r\n    constructor(size, map, startField) {\r\n        this._size = size;\r\n        this._map = map;\r\n        this._mapFields = map.getFields();\r\n        this._originalHeadField = startField;\r\n        this._headField = startField;\r\n        this._directions = {\r\n            UP: \"UP\",\r\n            DOWN: \"DOWN\",\r\n            LEFT: \"LEFT\",\r\n            RIGHT: \"RIGHT\"\r\n        };\r\n        this._direction = this._directions.RIGHT;\r\n        this.calcInitialSnakeFields();\r\n    }\r\n\r\n    reset() {\r\n        if (this._interval) {\r\n            window.clearInterval(this._interval);\r\n        }\r\n        this.destroySnake();\r\n        this._direction = this._directions.RIGHT;\r\n        this._headField = this._originalHeadField;\r\n        this.calcInitialSnakeFields();\r\n    }\r\n\r\n    startMove() {\r\n        this._interval = window.setInterval(this.step.bind(this), 120);\r\n    }\r\n\r\n    handleClick(coordinates) {\r\n        const element = document.querySelector(\".snake--first\");\r\n\r\n        if (!element) { return; }\r\n        const elementCoordinates = element.getBoundingClientRect();\r\n        switch(this._direction) {\r\n            case this._directions.UP:\r\n            case this._directions.DOWN:\r\n                if (elementCoordinates.x > coordinates[0]) {\r\n                    this.changeDirection({ key: \"A\" });\r\n                } else {\r\n                    this.changeDirection({ key: \"D\" });\r\n                }\r\n                return;\r\n\r\n            case this._directions.RIGHT:\r\n            case this._directions.LEFT:\r\n                if (elementCoordinates.y > coordinates[1]) {\r\n                    this.changeDirection({ key: \"W\" });\r\n                } else {\r\n                    this.changeDirection({ key: \"S\" });\r\n                }\r\n                return;\r\n        }\r\n    }\r\n\r\n    getFields() {\r\n        return this._snakeFields;\r\n    }\r\n\r\n    changeDirection(event) {\r\n        if (this._directionChanged) {\r\n            return;\r\n        }\r\n\r\n        const key = event.key;\r\n        switch (key.toUpperCase()) {\r\n            case \"W\":\r\n                if (this._direction !== this._directions.DOWN && this._direction !== this._directions.UP) {\r\n                    this._direction = this._directions.UP;\r\n                    this._directionChanged = true;\r\n                }\r\n                break;\r\n            case \"S\":\r\n                if (this._direction !== this._directions.UP && this._direction !== this._directions.DOWN) {\r\n                    this._direction = this._directions.DOWN;\r\n                    this._directionChanged = true;\r\n                }\r\n                break;\r\n            case \"A\":\r\n                if (this._direction !== this._directions.RIGHT && this._direction !== this._directions.LEFT) {\r\n                    this._direction = this._directions.LEFT;\r\n                    this._directionChanged = true;\r\n                }\r\n                break;\r\n            case \"D\":\r\n                if (this._direction !== this._directions.LEFT && this._direction !== this._directions.RIGHT) {\r\n                    this._direction = this._directions.RIGHT;\r\n                    this._directionChanged = true;\r\n                }\r\n                break;\r\n        }\r\n    }\r\n\r\n    translateField(field) {\r\n        if (field[0] > this._mapFields.length - 1) {\r\n            field[0] = 0;\r\n        }\r\n        if (field[1] > this._mapFields.length - 1) {\r\n            field[1] = 0;\r\n        }\r\n        if (field[0] < 0) {\r\n            field[0] = this._mapFields.length - 1;\r\n        }\r\n        if (field[1] < 0) {\r\n            field[1] = this._mapFields.length - 1;\r\n        }\r\n        return field;\r\n    }\r\n\r\n    step() {\r\n        this.calcNextHeadField();\r\n        this.checkIfCollision();\r\n        this.checkIfApple();\r\n        this.calcSnakeFields();\r\n    }\r\n\r\n    calcNextHeadField() {\r\n        switch (this._direction) {\r\n            case this._directions.RIGHT:\r\n                this._headField = this.translateField([this._headField[0], this._headField[1] + 1]);\r\n                break;\r\n            case this._directions.LEFT:\r\n                this._headField = this.translateField([this._headField[0], this._headField[1] - 1]);\r\n                break;\r\n            case this._directions.UP:\r\n                this._headField = this.translateField([this._headField[0] - 1, this._headField[1]]);\r\n                break;\r\n            case this._directions.DOWN:\r\n                this._headField = this.translateField([this._headField[0] + 1, this._headField[1]]);\r\n                break;\r\n        }\r\n    }\r\n    calcNextTailField() {\r\n        const lastField = this._snakeFields[this._snakeFields.length-1];\r\n        switch (this._direction) {\r\n            case this._directions.RIGHT:\r\n                return this.translateField([lastField[0], lastField[1] - 1]);\r\n            case this._directions.LEFT:\r\n                return this.translateField([lastField[0], lastField[1] + 1]);\r\n            case this._directions.UP:\r\n                return this.translateField([lastField[0] + 1, lastField[1]]);\r\n            case this._directions.DOWN:\r\n                return this.translateField([lastField[0] - 1, lastField[1]]);\r\n        }\r\n    }\r\n    checkIfCollision() {\r\n        const found = this._snakeFields.find( (snakeField) => {\r\n            return snakeField[0] === this._headField[0] &&\r\n                snakeField[1] === this._headField[1];\r\n        });\r\n\r\n        if (found) {\r\n            const customEvent = document.createEvent('HTMLEvents');\r\n            customEvent.initEvent('snake:dead', true, true);\r\n            document.dispatchEvent(customEvent);\r\n        }\r\n    }\r\n\r\n    stop() {\r\n        window.clearInterval(this._interval);\r\n    }\r\n\r\n    checkIfApple() {\r\n        if (this._map.isAppleField(this._headField)) {\r\n            this.addSnakeField();\r\n            const customEvent = document.createEvent('HTMLEvents');\r\n            customEvent.initEvent('snake:apple', true, true);\r\n            document.dispatchEvent(customEvent);\r\n        }\r\n    }\r\n\r\n    addSnakeField() {\r\n        const nextField = this.calcNextTailField();\r\n        this._snakeFields.push(nextField);\r\n    }\r\n\r\n    calcSnakeFields() {\r\n        this._lastField = this._snakeFields.pop();\r\n        this._snakeFields.unshift(this._headField);\r\n        this.renderSnake();\r\n    }\r\n\r\n    calcInitialSnakeFields() {\r\n        this._snakeFields = [\r\n            this._headField,\r\n            this.translateField([this._headField[0], this._headField[1] - 1]),\r\n            this.translateField([this._headField[0], this._headField[1] - 2])\r\n        ];\r\n        this.renderSnake();\r\n    }\r\n\r\n    destroySnake() {\r\n        const fields = document.querySelectorAll(\".snake\");\r\n\r\n        for (let i = 0; i < fields.length; i++) {\r\n            fields[i].classList.remove(\"snake\");\r\n            fields[i].classList.remove(\"snake--first\");\r\n            fields[i].classList.remove(\"snake--last\");\r\n            fields[i].classList.remove(\"snake--up\");\r\n            fields[i].classList.remove(\"snake--down\");\r\n            fields[i].classList.remove(\"snake--left\");\r\n            fields[i].classList.remove(\"snake--right\");\r\n        }\r\n    }\r\n\r\n    renderSnake() {\r\n        let snakeDomField, lastField;\r\n        if (this._lastField) {\r\n            lastField = document.querySelector(\r\n                `.field-${this._lastField[0]}-${this._lastField[1]}`\r\n            );\r\n            lastField.classList.remove(\"snake\");\r\n            lastField.classList.remove(\"snake--first\");\r\n            lastField.classList.remove(\"snake--last\");\r\n            lastField.classList.remove(\"snake--up\");\r\n            lastField.classList.remove(\"snake--down\");\r\n            lastField.classList.remove(\"snake--left\");\r\n            lastField.classList.remove(\"snake--right\");\r\n        }\r\n\r\n        for (let i = 0; i < this._snakeFields.length; i++) {\r\n            snakeDomField = document.querySelector(\r\n                `.field-${this._snakeFields[i][0]}-${this._snakeFields[i][1]}`\r\n            );\r\n            snakeDomField.classList.add(\"snake\");\r\n\r\n            snakeDomField.classList.remove(\"snake--first\");\r\n            snakeDomField.classList.remove(\"snake--last\");\r\n            snakeDomField.classList.remove(\"snake--up\");\r\n            snakeDomField.classList.remove(\"snake--down\");\r\n            snakeDomField.classList.remove(\"snake--left\");\r\n            snakeDomField.classList.remove(\"snake--right\");\r\n\r\n            if (i === 0) {\r\n                snakeDomField.classList.add(`snake--first`);\r\n                snakeDomField.classList.add(`snake--${this._direction.toLowerCase()}`);\r\n            }\r\n            if (i === this._snakeFields.length -1) {\r\n                snakeDomField.classList.add(`snake--last`);\r\n                snakeDomField.classList.add(`snake--${this._direction.toLowerCase()}`);\r\n            }\r\n        }\r\n\r\n        this._directionChanged = false;\r\n    }\r\n}"]}