{"version":3,"sources":["snake/src/js/snake-map.js"],"names":["SnakeMap","size","_classCallCheck","this","_size","_fields","_fieldTypes","field","apple","blocked","key","value","i","generateMap","j","getFields","snakeFields","y","x","allowedFields","isAppleField","length","placeApple","rndField","Math","round","renderApple","existing","document","querySelector","rnd","createElement","appleDom","concat","appendChild","element","remove","classList","add","setAttribute","fieldDom","render","fieldDomInner","rowDom"],"mappings":"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","file":"snake-map.js","sourcesContent":["class SnakeMap {\n    constructor(size) {\n        this._size = size;\n        this._fields = [];\n        this._fieldTypes = {\n            field: \"1\",\n            apple: \"2\",\n            blocked: \"3\"\n        };\n        this.generateMap();\n    }\n\n    getFields() {\n        return this._fields;\n    }\n\n    generateMap() {\n        for (let i = 0; i < this._size; i++) {\n            for (let j = 0; j < this._size; j++) {\n                if (!this._fields[i]) {this._fields[i] = [];}\n                this._fields[i][j] = this._fieldTypes.field;\n            }\n        }\n    }\n\n    isAppleField(field) {\n        return this.getFields()[field[0]][field[1]] === \"2\";\n    }\n\n    placeApple(snakeFields) {\n        let snakeField, x, y;\n        snakeFields = snakeFields || [];\n\n        for (let i = 0; i < snakeFields.length; i++) {\n            y = snakeFields[i][0],\n            x = snakeFields[i][1]\n            this._fields[y][x] = this._fieldTypes.blocked;\n        }\n\n        let allowedFields = []\n\n        for (let i = 0; i < this._fields.length; i++) {\n            for (let j = 0; j < this._fields[i].length; j++) {\n                if (this._fields[i][j] !== this._fieldTypes.blocked) {\n                    allowedFields.push([i, j]);\n                }\n            }\n        }\n\n        const rnd = Math.round(Math.random() * (allowedFields.length-1));\n        const rndField = allowedFields[rnd];\n        this.generateMap();\n        this._fields[rndField[0]][rndField[1]] = this._fieldTypes.apple;\n        this.renderApple(rndField[0], rndField[1]);\n    }\n\n    renderApple(y, x) {\n        const existing = document.querySelector(\".apple\");\n        if (existing) {\n            existing.remove();\n        }\n        const appleDom = document.createElement(\"img\");\n        appleDom.setAttribute(\"src\", \"img/mario/apple.svg\");\n        appleDom.classList.add(\"apple\");\n        document.querySelector(`.field-${y}-${x}`).appendChild(appleDom);\n    }\n\n    render(element) {\n        let fieldDom, rowDom, fieldDomInner;\n        for (let i = 0; i < this._fields.length; i++) {\n            rowDom = document.createElement(\"div\");\n            rowDom.classList.add(\"row\");\n\n            for (let j = 0; j < this._fields[i].length; j++) {\n                fieldDomInner = document.createElement(\"div\");\n                fieldDomInner.classList.add(`field__inner`);\n                fieldDom = document.createElement(\"div\");\n                fieldDom.classList.add(`field`);\n                fieldDom.classList.add(`field-${i}-${j}`);\n                fieldDom.appendChild(fieldDomInner);\n                rowDom.appendChild(fieldDom);\n            }\n            element.appendChild(rowDom);\n        }\n    }\n}"]}