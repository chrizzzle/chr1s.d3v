{"version":3,"sources":["snake/src/js/snake-map.js"],"names":["SnakeMap","size","_classCallCheck","this","_size","_fields","_fieldTypes","field","apple","blocked","generateMap","i","j","getFields","snakeFields","x","y","length","allowedFields","push","rndField","Math","random","existing","document","querySelector","remove","createElement","appleDom","setAttribute","classList","add","concat","appendChild","rowDom","fieldDomInner","renderApple","fieldDom"],"mappings":"uZAAMA,oBACF,SAAAA,EAAYC,GAAMC,gBAAAC,KAAAH,GACdG,KAAKC,MAAQH,EACbE,KAAKE,QAAU,GACfF,KAAKG,YAAc,CACfC,MAAO,IACPC,MAAO,IACPC,QAAS,KANjBN,KAAAO,uEAEI,OAAKL,KAAUA,8CAIXI,IAAO,IAAEE,EAAA,EAAAA,EAAAR,KAAAC,MAAAO,IAHb,IAAA,IAAAC,EAAA,EAAAA,EAAAT,KAAAC,MAAAQ,IAKAT,KAAAE,QAAAM,KAAAR,KAAAE,QAAAM,GAAA,IACHR,KAAAE,QAAAM,GAAAC,GAAAT,KAAAG,YAAAC,2CAGUA,GACV,MAAA,MAAAJ,KAAAU,YAAAN,EAAA,IAAAA,EAAA,uCAeUO,GAZP,IAAiBC,EAAGC,EAChBF,EAAAA,GAAyBV,GACE,IAAA,IAAKC,EAAAA,EAALM,EAAAG,EAAAG,OAAAN,IAAsBK,EAAAF,EAAAH,GAAA,GAgBjDI,EAAID,EAAYH,GAAG,GAffR,KAAKE,QAALW,GAAAD,GAAqBZ,KAAKG,YAAYC,QAqB9C,IAlBH,IAAAW,EAAA,GAkBYP,EAAI,EAAGA,EAAIR,KAAKE,QAAQY,OAAQN,IACrC,IAAK,IAAIC,EAAI,EAAGA,EAAIT,KAjBfI,QAAOI,GAAAM,OAAAL,IACJC,KAAAA,QAAYN,GAAMK,KAAIL,KAA3BD,YAAPG,SACHS,EAAAC,KAAA,CAAAR,EAAAC,IAIGE,IAmBMM,EAAWF,EAnBHJ,KAAAA,MAAWO,KAAIC,UAA7BJ,EAAAD,OAAA,KAEAd,KAAKO,cACDM,KAAIF,QAAAA,EAAJ,IACCM,EAAGN,IAAAX,KADJG,YAAAE,MAEAL,KAAKE,YAALe,EAA0Bd,GAAAA,EAAYG,wCAGtCS,EAAAA,GAkBJ,IAAMK,EAAWC,SAASC,cAAc,UAhBnCF,GACDA,EAAaG,SAELR,IAAAA,EAAaM,SAAMG,cAAnB,OACHC,EAAAC,aAAA,MAAA,uBACJD,EAAAE,UAAAC,IAAA,SACJP,SAAAC,cAAA,UAAAO,OAAAhB,EAAA,KAAAgB,OAAAjB,IAAAkB,YAAAL,kCAGKR,GAEN,IADA,IAAKV,EAALwB,EAAAC,EACK9B,EAAQe,EAAAA,EAASjB,KAAIiB,QAASH,OAAMN,IAAKL,EACzC8B,EAAAA,SAAYhB,cAAqB,QACzCU,UAAAC,IAAA,OAmBO,IAAK,IAAInB,EAAI,EAAGA,EAAIT,KAAKE,QAAQM,GAAGM,OAAQL,KACxCuB,EAlBAnB,SAAMW,cAAA,QACYF,UAAAA,IAApBF,iBAmBEc,EAAWb,SAASG,cAAc,QAlB5BG,UAAAC,IAAVR,SACQc,EAARP,UAAAC,IAAQ,SAAAC,OAARrB,EAAQ,KAAAqB,OAARpB,IACHyB,EAAAJ,YAAAE,GAoBOD,EAAOD,YAAYI,GAlB3BT,EAASC,YAAaK","file":"snake-map.js","sourcesContent":["class SnakeMap {\r\n    constructor(size) {\r\n        this._size = size;\r\n        this._fields = [];\r\n        this._fieldTypes = {\r\n            field: \"1\",\r\n            apple: \"2\",\r\n            blocked: \"3\"\r\n        };\r\n        this.generateMap();\r\n    }\r\n\r\n    getFields() {\r\n        return this._fields;\r\n    }\r\n\r\n    generateMap() {\r\n        for (let i = 0; i < this._size; i++) {\r\n            for (let j = 0; j < this._size; j++) {\r\n                if (!this._fields[i]) {this._fields[i] = [];}\r\n                this._fields[i][j] = this._fieldTypes.field;\r\n            }\r\n        }\r\n    }\r\n\r\n    isAppleField(field) {\r\n        return this.getFields()[field[0]][field[1]] === \"2\";\r\n    }\r\n\r\n    placeApple(snakeFields) {\r\n        let snakeField, x, y;\r\n        snakeFields = snakeFields || [];\r\n\r\n        for (let i = 0; i < snakeFields.length; i++) {\r\n            y = snakeFields[i][0],\r\n            x = snakeFields[i][1]\r\n            this._fields[y][x] = this._fieldTypes.blocked;\r\n        }\r\n\r\n        let allowedFields = []\r\n\r\n        for (let i = 0; i < this._fields.length; i++) {\r\n            for (let j = 0; j < this._fields[i].length; j++) {\r\n                if (this._fields[i][j] !== this._fieldTypes.blocked) {\r\n                    allowedFields.push([i, j]);\r\n                }\r\n            }\r\n        }\r\n\r\n        const rnd = Math.round(Math.random() * (allowedFields.length-1));\r\n        const rndField = allowedFields[rnd];\r\n        this.generateMap();\r\n        this._fields[rndField[0]][rndField[1]] = this._fieldTypes.apple;\r\n        this.renderApple(rndField[0], rndField[1]);\r\n    }\r\n\r\n    renderApple(y, x) {\r\n        const existing = document.querySelector(\".apple\");\r\n        if (existing) {\r\n            existing.remove();\r\n        }\r\n        const appleDom = document.createElement(\"img\");\r\n        appleDom.setAttribute(\"src\", \"img/mario/apple.svg\");\r\n        appleDom.classList.add(\"apple\");\r\n        document.querySelector(`.field-${y}-${x}`).appendChild(appleDom);\r\n    }\r\n\r\n    render(element) {\r\n        let fieldDom, rowDom, fieldDomInner;\r\n        for (let i = 0; i < this._fields.length; i++) {\r\n            rowDom = document.createElement(\"div\");\r\n            rowDom.classList.add(\"row\");\r\n\r\n            for (let j = 0; j < this._fields[i].length; j++) {\r\n                fieldDomInner = document.createElement(\"div\");\r\n                fieldDomInner.classList.add(`field__inner`);\r\n                fieldDom = document.createElement(\"div\");\r\n                fieldDom.classList.add(`field`);\r\n                fieldDom.classList.add(`field-${i}-${j}`);\r\n                fieldDom.appendChild(fieldDomInner);\r\n                rowDom.appendChild(fieldDom);\r\n            }\r\n            element.appendChild(rowDom);\r\n        }\r\n    }\r\n}"]}